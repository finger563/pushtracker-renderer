////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// FILE NAME:     $Source:$
//                $Date:$
//                $Revision:$
//
// AUTHOR:        Jean-Sebastien Stoezel (js.stoezel@gmail.com)
//
// HISTORY:       $Log:$
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


#define STAT0                   21		// blue LED is on P0.21 (active low)
#define STAT1			31		// usb (green) LED is on P0.31 (active low)


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INCLUDES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "logomatic_v2.hpp"
#include "LPC214x.h"

#if 0
extern "C"
{
  #include "main.h"
}
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MACROS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// STATIC VARIABLES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LOCAL FUNCTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NAME:          LogomaticV2DelayMs
// DESCRIPTION:   Provides a delay by burning CPU cycles.
// RETURN VALUE:  None
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static void LogomaticV2DelayMs(
   const uint32_t count // in, approximate delay in milliseconds
   );

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NAME:          LogomaticV2PllFeed
// DESCRIPTION:   Feed the PLL.
// RETURN VALUE:  None
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
static void LogomaticV2PllFeed(void);

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FUNCTIONS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LogomaticV2Blinky(void)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
//   PINSEL0 = 0xCF351505;
//   PINSEL1 = 0x15441801;
//   IODIR0 |= 0x00000884;

   while(true)
   {
      LogomaticV2Stat(0, LOGOMATIC_STAT_ON);
      LogomaticV2Stat(1, LOGOMATIC_STAT_OFF);
      LogomaticV2DelayMs(500);
      LogomaticV2Stat(0, LOGOMATIC_STAT_OFF);
      LogomaticV2Stat(1, LOGOMATIC_STAT_ON);
      LogomaticV2DelayMs(500);
   }
} // LogomaticV2Blinky


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LogomaticV2DelayMs(
   const uint32_t count // in
   )
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
	uint32_t i        = 0;
   uint32_t countMs  = count * 10000;
	
   for(i = 0; i < countMs; i++)
		asm volatile ("nop");

} // LogomaticV2DelayMs

   
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LogomaticV2Init(void)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
    SCS = 3;
  
   // Setting Multiplier and Divider values
	PLLCFG=0x25; // M = 6
   LogomaticV2PllFeed();

   // Enabling the PLL */
   PLLCON=0x1;
   LogomaticV2PllFeed();

#define PLOCK 0x400
   // Wait for the PLL to lock to set frequency
   while(!(PLLSTAT & PLOCK)) ;

   // Connect the PLL as the clock source
   PLLCON=0x3;
   LogomaticV2PllFeed();

   // Enabling MAM and setting number of clocks used for Flash memory fetch (4 cclks in this case)
   //MAMTIM=0x3; //VCOM?
   MAMCR=0x2;
   MAMTIM=0x4; //Original

   // Setting peripheral Clock (pclk) to System Clock (cclk)
   VPBDIV=0x1;

//	PINSEL0 = 0xCF351505;
//	PINSEL1 = 0x15441801;
//        PINSEL1 &= ~((3<<30)|(3<<10));
        //PINSEL0 &= ~((3<<4)|(3<<22));
	FIO0DIR |= (1<<STAT0)|(1<<STAT1);
	FIO0SET = (1<<STAT0)|(1<<STAT1);

	S0SPCR = 0x08;  // SPI clk to be pclk/8
	S0SPCR = 0x30;  // master, msb, first clk edge, active high, no ints
   
   LogomaticV2Stat(0, LOGOMATIC_STAT_ON);
   LogomaticV2Stat(1, LOGOMATIC_STAT_ON);

} // LogomaticV2Init

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LogomaticV2PllFeed(void)
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
   PLLFEED=0xAA;
   PLLFEED=0x55;
} // LogomaticV2PllFeed

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LogomaticV2Stat(
   const uint32_t statNum, // in
   const uint32_t onOff    // in
   )
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
{
	if(1 == statNum)
	{
      // Stat1
		if(LOGOMATIC_STAT_ON == onOff)
                {
                   // OFF
                   FIO0CLR = (1<<STAT0);
                }
		else
                {
                   // OFF
                   FIO0SET = (1<<STAT0);
                }
	}
	else
	{
      // Stat0
		if(LOGOMATIC_STAT_ON == onOff)
                {
                   // ON
                   FIO0CLR = (1<<STAT1);
                }
		else
                {
                   // OFF
                   FIO0SET = (1<<STAT1);
                }
	}
} // LogomaticV2Stat
